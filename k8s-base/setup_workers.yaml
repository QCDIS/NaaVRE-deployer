- hosts: master
  gather_facts: no
  tasks:

    - name: Generate join cmd
      shell: kubeadm token create --print-join-command
      register: join_cmd

    - name: Add join cmd to dummy host
      add_host:
        name: join_cmd_holder
        cmd: '{{ join_cmd.stdout }}'

    - name: Fetch conf from master
      fetch:
        src: '/home/{{ ansible_ssh_user }}/.kube/config'
        dest: /tmp/k8s_config
        flat: yes

- hosts: workers
  gather_facts: no
  tasks:

    - name: Copy conf to worker
      copy:
        src: /tmp/k8s_config
        dest: '/home/{{ ansible_ssh_user }}/.kube/config'

    - name: Add the br_netfilter module
      become: yes
      modprobe:
        name: br_netfilter
        state: present

    - name: update sysctl param
      become: yes
      sysctl:
        name: '{{ item }}'
        value: 1
        state: present
        reload: yes
      with_items:
        - net.bridge.bridge-nf-call-ip6tables
        - net.ipv4.ip_forward

    - name: kubeadm reset -f
      shell: kubeadm reset -f
      become: yes
      ignore_errors: True

    - name: Get the private IP of the network
      shell: 'ip addr | grep -Po "(?<=inet )((\d+\.){3}\d+)(?=/\d+ .*{{ internal_network_interface }})"'
      register: private_ip

    - shell: echo "{{ hostvars['join_cmd_holder']['cmd'] }}" | grep -Po '(?<=join )(\d+\.){3}\d+:\d+(?= )'
      register: api_server_endpoint
    - shell: echo "{{ hostvars['join_cmd_holder']['cmd'] }}" | grep -Po '(?<=--token )\S+'
      register: discovery_token
    - shell: echo "{{ hostvars['join_cmd_holder']['cmd'] }}" | grep -Po '(?<=--discovery-token-ca-cert-hash )\S+'
      register: discovery_token_ca_cert_hash

    - name: Create InitConfiguration
      shell: |
        echo '
        apiVersion: kubeadm.k8s.io/v1beta3
        kind: JoinConfiguration
        discovery:
          bootstrapToken:
            apiServerEndpoint: "{{ api_server_endpoint.stdout }}"
            token: "{{ discovery_token.stdout }}"
            caCertHashes:
            - "{{ discovery_token_ca_cert_hash.stdout }}"
        nodeRegistration:
          kubeletExtraArgs:
            node-ip: "{{ private_ip.stdout }}"
        ' > worker_InitConfiguration.yaml

    - name: Join cluster
      shell: 'kubeadm join --config worker_InitConfiguration.yaml'
      become: yes

    - shell: kubectl get nodes -o json | jq '.items[].status.conditions[4].status'
      register: k8s_nodes_output
      retries: 70
      delay: 3
      until: groups['all'] | length | int - 1 == k8s_nodes_output.stdout_lines | length
